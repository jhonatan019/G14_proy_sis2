/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import baseDatos.ConexionBD;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.mycompany.cine2.Item;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.Desktop;
import java.io.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.YearMonth;
import java.util.Date;
import javax.swing.JOptionPane;

public class SucursalConMasIngresos extends javax.swing.JFrame {

    
    private Connection conexion;
    private DefaultTableModel modelo;
    
    public SucursalConMasIngresos() {
        initComponents();
        setResizable(false);
        setTitle("Top Sucursal con más Ventas");
        setLocationRelativeTo(null);
        
        try {
            conexion = ConexionBD.getConnection();
            inicializarTabla();
            cargarComboMeses();
        } catch (SQLException e) {
            mostrarError("Error de conexión: " + e.getMessage());
        }
    }
    
    private void inicializarTabla() {
        modelo = new DefaultTableModel(
            new Object[][] {},
            new String[] {"Sucursal", "Total Entradas", "Total Ventas (Bs.)", "Mes"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tabla_ventas.setModel(modelo);
    }
    
    private void cargarComboMeses() {
        combo_mes.removeAllItems();
        YearMonth mesActual = YearMonth.now();
        
        for (int i = 0; i < 12; i++) {
            YearMonth mes = mesActual.minusMonths(i);
            String formato = String.format("%d-%02d", 
                mes.getYear(), 
                mes.getMonthValue()
            );
            combo_mes.addItem(new Item(
                mes.getYear() * 100 + mes.getMonthValue(),
                formato
            ));
        }
    }
    
    
    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(
            this,
            mensaje,
            "Error",
            JOptionPane.ERROR_MESSAGE
        );
    }
    
    private void mostrarInfo(String mensaje) {
        JOptionPane.showMessageDialog(
            this,
            mensaje,
            "Información",
            JOptionPane.INFORMATION_MESSAGE
        );
    }
    
    private void mostrarAdvertencia(String mensaje) {
        JOptionPane.showMessageDialog(
            this,
            mensaje,
            "Advertencia",
            JOptionPane.WARNING_MESSAGE
        );
    }
    private boolean validarDatosParaEmitir() {
        if (modelo.getRowCount() == 0) {
            mostrarAdvertencia("No hay datos para generar el reporte. Por favor, realice una consulta primero.");
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btn_ver = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_ventas = new javax.swing.JTable();
        btn_regresar = new javax.swing.JButton();
        btn_emitir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        combo_mes = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(39, 29, 41));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TOP SUCURSAL CON MAS VENTAS");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 847, -1));

        btn_ver.setBackground(new java.awt.Color(0, 51, 204));
        btn_ver.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btn_ver.setForeground(new java.awt.Color(255, 255, 255));
        btn_ver.setText("Ver");
        btn_ver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_verActionPerformed(evt);
            }
        });
        jPanel1.add(btn_ver, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 220, 120, 30));

        tabla_ventas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla_ventas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, 940, 330));

        btn_regresar.setBackground(new java.awt.Color(230, 12, 16));
        btn_regresar.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btn_regresar.setForeground(new java.awt.Color(255, 255, 255));
        btn_regresar.setText("Regresar");
        btn_regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_regresarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 700, 150, 50));

        btn_emitir.setBackground(new java.awt.Color(230, 12, 16));
        btn_emitir.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btn_emitir.setForeground(new java.awt.Color(255, 255, 255));
        btn_emitir.setText("Emitir PDF");
        btn_emitir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_emitirActionPerformed(evt);
            }
        });
        jPanel1.add(btn_emitir, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 700, 150, 50));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("MES:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, 60, -1));

        combo_mes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jPanel1.add(combo_mes, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 220, 160, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/LOGOIZQUIERDA.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 990, 710));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 830));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_verActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_verActionPerformed
      modelo.setRowCount(0);
        Item mesSeleccionado = (Item) combo_mes.getSelectedItem();
        
        if (mesSeleccionado == null) {
            mostrarAdvertencia("Por favor, seleccione un mes");
            return;
        }
        
        int valorMes = mesSeleccionado.getId();
        int año = valorMes / 100;
        int mes = valorMes % 100;
        
        String sql = """
            SELECT 
                s.NOMBRE_SUCURSAL, 
                COUNT(b.ID_BUTACAS) as total_entradas,
                COUNT(b.ID_BUTACAS) * c.VALOR_CONFIG as total_ventas,
                DATE_FORMAT(v.FECHA_VENTA, '%M %Y') as mes
            FROM sucursal s
            INNER JOIN sala sa ON s.ID_SUCURSAL = sa.ID_SUCURSAL
            INNER JOIN funcion f ON sa.ID_SALA = f.ID_SALA
            INNER JOIN butaca b ON f.ID_HORARIO = b.ID_HORARIO
            INNER JOIN venta v ON b.ID_VENTA = v.ID_VENTA
            CROSS JOIN configuracion c 
            WHERE YEAR(v.FECHA_VENTA) = ? 
            AND MONTH(v.FECHA_VENTA) = ?
            AND c.NOMBRE_CONFIG = 'PRECIO_BOLETO'
            GROUP BY s.ID_SUCURSAL, mes, c.VALOR_CONFIG
            ORDER BY total_entradas DESC
            LIMIT 1
            """;
            
        try (PreparedStatement ps = conexion.prepareStatement(sql)) {
            ps.setInt(1, año);
            ps.setInt(2, mes);
            
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                String nombreSucursal = rs.getString("NOMBRE_SUCURSAL");
                int totalEntradas = rs.getInt("total_entradas");
                double totalVentas = rs.getDouble("total_ventas");
                String mesStr = rs.getString("mes");
                
                Object[] fila = {
                    nombreSucursal,
                    totalEntradas,
                    String.format("%.2f", totalVentas),
                    mesStr
                };
                modelo.addRow(fila);
                
                mostrarInfo(String.format("""
                    La sucursal con más ventas en %s es:
                    Sucursal: %s
                    Total Entradas: %d
                    Total Ventas: Bs. %.2f""", 
                    mesSeleccionado.toString(),
                    nombreSucursal,
                    totalEntradas,
                    totalVentas));
            } else {
                mostrarInfo("No se encontraron ventas para el mes seleccionado");
            }
        } catch (SQLException e) {
            mostrarError("Error al cargar datos: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_verActionPerformed

    private void btn_regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_regresarActionPerformed
        MenuAdminBar menu = new MenuAdminBar();
        menu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btn_regresarActionPerformed

    private void btn_emitirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_emitirActionPerformed
     if (modelo.getRowCount() == 0) {
            mostrarAdvertencia("No hay datos para generar el reporte. Por favor, realice una consulta primero.");
            return;
        }
        
        try {
            Rectangle pageSize = new Rectangle(590f, 800f);
            Document documento = new Document(pageSize, 40f, 40f, 40f, 40f);
            
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Guardar Reporte PDF");
            fileChooser.setFileFilter(new FileNameExtensionFilter("PDF files (*.pdf)", "pdf"));
            
            String fecha = new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date());
            String nombreArchivo = "Reporte-TopSucursal-" + fecha + ".pdf";
            fileChooser.setSelectedFile(new File(nombreArchivo));
            
            if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
                return;
            }
            
            String rutaPDF = fileChooser.getSelectedFile().getAbsolutePath();
            if (!rutaPDF.toLowerCase().endsWith(".pdf")) {
                rutaPDF += ".pdf";
            }
            
            PdfWriter.getInstance(documento, new FileOutputStream(rutaPDF));
            documento.open();
            
            try {
                Image logo = Image.getInstance("src/main/resources/images/logo.jpg");
                logo.scaleToFit(100, 100);
                logo.setAlignment(Element.ALIGN_CENTER);
                documento.add(logo);
            } catch (Exception e) {
                System.out.println("No se pudo cargar el logo: " + e.getMessage());
            }
            
            Paragraph titulo = new Paragraph();
            titulo.add(new Chunk("CINE PELICULON\n", 
                FontFactory.getFont("Helvetica", 16, Font.BOLD)));
            titulo.add(new Chunk("TOP SUCURSAL CON MÁS VENTAS\n\n",
                FontFactory.getFont("Helvetica", 14, Font.BOLD)));
            titulo.setAlignment(Element.ALIGN_CENTER);
            documento.add(titulo);
            
            Paragraph fechaReporte = new Paragraph();
            fechaReporte.add(new Chunk("Fecha de emisión: " + 
                new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date()) + "\n\n",
                FontFactory.getFont("Helvetica", 10)));
            documento.add(fechaReporte);
            
            PdfPTable tabla = new PdfPTable(4);
            tabla.setWidthPercentage(100);
            
            String[] headers = {"Sucursal", "Total Entradas", "Total Ventas (Bs.)", "Mes"};
            for (String header : headers) {
                PdfPCell cell = new PdfPCell(new Phrase(header, 
                    FontFactory.getFont("Helvetica", 12, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(5);
                tabla.addCell(cell);
            }
            
            for (int i = 0; i < modelo.getRowCount(); i++) {
                for (int j = 0; j < modelo.getColumnCount(); j++) {
                    PdfPCell cell = new PdfPCell(new Phrase(
                        String.valueOf(modelo.getValueAt(i, j)),
                        FontFactory.getFont("Helvetica", 10)));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setPadding(5);
                    tabla.addCell(cell);
                }
            }
            
            documento.add(tabla);
            
            Paragraph pie = new Paragraph();
            pie.add(new Chunk("\n\nInforme de la sucursal con mayor número de ventas\n",
                FontFactory.getFont("Helvetica", 8)));
            pie.add(new Chunk("CINE PELICULON - Sistema de Gestión\n",
                FontFactory.getFont("Helvetica", 8, Font.ITALIC)));
            pie.setAlignment(Element.ALIGN_CENTER);
            documento.add(pie);
            
            documento.close();
            
            mostrarInfo("El reporte se ha generado exitosamente:\n" + rutaPDF);
            
            Desktop.getDesktop().open(new File(rutaPDF));
            
        } catch (Exception e) {
            mostrarError("Error al generar el PDF: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_emitirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SucursalConMasIngresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SucursalConMasIngresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SucursalConMasIngresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SucursalConMasIngresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SucursalConMasIngresos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_emitir;
    private javax.swing.JButton btn_regresar;
    private javax.swing.JButton btn_ver;
    private javax.swing.JComboBox<Item> combo_mes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla_ventas;
    // End of variables declaration//GEN-END:variables
}
